#!/usr/bin/perl
################################################################################
# $Id: payloader.pl v0.2 2025-04-24 02:10:05 +0200 .m0rph $
################################################################################
# Description:
#  This little payloader is built for sending malicious payloads for testing.
################################################################################

use strict;
use warnings;
use IO::Socket::INET;
use URI::Escape;

$| = 1; # auto-flush on socket

# Configuration
my $host = 'nhttpd.js';
my $port = 80;
my $path = '/about/business';
#my $querystring = '';
#my $querystring = '?email=.m0rph@m0rphisto.net';
my $querystring = uri_escape(uri_escape('?email=<script>alert(1)</scipt>'));
my $fragment = '';
my $hexfrag = "\x00\x03\x32\x33\x02";

# Payload generation
my $payload  = "GET $path$querystring$fragment HTTP/1.1\r\n";
   $payload .= "Host: $host\r\n";
   #$payload .= "User-Agent: Payloader/1.0 ($hexfrag)\r\n";
   $payload .= "User-Agent: Payloader/1.0 (.m0rph\@work)\r\n";
   $payload .= "Cookie: Trallala=Fallera\r\n";
   $payload .= "Accept: */*\r\n";
   $payload .= "\r\n";


# Connect
my $sock = IO::Socket::INET->new(
    PeerAddr => $host,
    PeerPort => $port,
    Proto    => 'tcp',
    Timeout  => 5
) or die "[ERROR] Cannot establish connection: $!";

# Send
print '#' x 80;
print "[INFO] Sending payload to $host:$port ...\n";
print '#' x 80;
print $payload;

if ($sock) {
   print '#' x 80;
   $sock->send($payload);
   print "payload sent\n";
}

# Receive response and close socket
print "[RECV] $_" while <$sock>;
$sock->close();

exit 0;
